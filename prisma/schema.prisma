generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  firstName              String
  lastName               String
  phone                  String
  email                  String                  @unique
  role                   Role
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  password               String
  isVerified             Boolean                 @default(false)
  profilePictureUrl      String?
  receivedMessages       Message[]               @relation("ReceivedMessages")
  sentMessages           Message[]               @relation("SentMessages")
  customerRequests       Request[]               @relation("RequestCustomer")
  ratingsReceived        Review[]                @relation("Reviewee")
  ratingsGiven           Review[]                @relation("Reviewer")
  technicianProfile      TechnicianProfile?
  TechnicianVerification TechnicianVerification?
}

model TechnicianProfile {
  userId               String             @id
  servicesProvided     ServiceType[]
  businessName         String
  businessRegistered   Boolean
  incorpNumber         String?
  websiteLink          String
  socialMediaLink      String[]
  bio                  String             @db.VarChar(1024)
  isVerifiedTechnician Boolean
  verificationStatus   VerificationStatus @default(PENDING)
  offers               Offer[]            @relation("OffersSent")
  portfolio            PortfolioItem[]
  requestsTaken        Request[]          @relation("RequestsTaken")
  technicianAddress    TechnicianAddress?
  user                 User               @relation(fields: [userId], references: [id])
}

model TechnicianVerification {
  id              String             @id @default(uuid())
  technicianId    String             @unique
  idFrontUrl      String
  idBackUrl       String
  selfieUrl       String
  status          VerificationStatus @default(PENDING)
  verifiedAt      DateTime?
  verifiedBy      String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  technician      User               @relation(fields: [technicianId], references: [id])
}

model VerificationToken {
  code      String            @id @default(uuid())
  email     String
  createdAt DateTime          @default(now())
  expiresAt DateTime
  type      VerificationType?
}

model Request {
  id                   String             @id @default(uuid())
  pictures             String[]
  jobDescription       String
  budget               Int
  shoeSize             Float
  brand                String
  shoeName             String
  releaseYear          Int
  previouslyWorkedWith String
  service              ServiceType
  subtypes             String[]
  requestStatus        RequestStatus      @default(BOOKED)
  shippingLabelUrl     String?
  trackingNumber       String?
  shippingStatus       ShippingStatus     @default(PENDING_LABEL)
  shippingCarrier      String?
  customerId           String
  technicianId         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  city                 String
  stateCode            String
  street               String
  zipCode              String
  offers               Offer[]            @relation("RequestOffers")
  customer             User               @relation("RequestCustomer", fields: [customerId], references: [id])
  technician           TechnicianProfile? @relation("RequestsTaken", fields: [technicianId], references: [userId])
  review               Review?
}

model Offer {
  id               String            @id @default(uuid())
  amount           Float
  description      String
  status           OfferStatus       @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  attempts         Int               @default(1)
  technicianId     String
  requestId        String
  shippingEstimate Float
  estimatedTime    Int
  request          Request           @relation("RequestOffers", fields: [requestId], references: [id])
  technician       TechnicianProfile @relation("OffersSent", fields: [technicianId], references: [userId])
}

model TechnicianAddress {
  id                  String            @id @default(uuid())
  street              String
  city                String
  stateCode           String
  zipCode             String
  technicianProfileId String            @unique
  technicianProfile   TechnicianProfile @relation(fields: [technicianProfileId], references: [userId])
}

model Review {
  id          String   @id @default(uuid())
  rating      Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewerId  String
  revieweeId  String
  requestId   String   @unique
  request     Request  @relation(fields: [requestId], references: [id])
  reviewee    User     @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
}

model PortfolioItem {
  id           String            @id @default(uuid())
  title        String
  description  String
  images       String[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  technicianId String
  technician   TechnicianProfile @relation(fields: [technicianId], references: [userId])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

enum Role {
  CUSTOMER
  TECHNICIAN
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum ServiceType {
  CLEANING
  CUSTOM
  RESTORATION
}

enum CleaningSubtype {
  LIGHT_CLEAN
  DEEP_CLEAN
  STAIN_REMOVAL
  DEODORIZATION
  DEOXIDIZE_NETTING
  DEOXIDIZE_RUBBER_SOLES
  DESIGNER_SHOE_CLEAN
  ICE_CLEAR_SOLES
  SUEDE_NUBUCK_CLEAN
  UPPER_REPAINT
  OTHER
}

enum CustomSubtype {
  DYE
  NEO_VINTAGE
  PAINT
  OTHER
}

enum RestorationSubtype {
  BACK_TABS_SWAP
  CLEAN_BEFORE_RESTORING
  GLUE_TOUCH_UP
  ICE_CLEAR_SOLES
  MIDSOLE_REPAINT
  PAINT_TOUCH_UP
  REGLUE
  REPLACE_NETTING
  REPLACE_WINGS
  SOLE_SWAPS_WITH_DONOR_SOLES
  SOLE_SWAPS_WITHOUT_DONOR_SOLES
  SUEDE_NUBUCK_REDYE
  UPPER_REPAINT
  OTHER
}

enum RequestType {
  STANDARD
  RUSH
  BULK
}

enum RequestStatus {
  BOOKED
  IN_PROGRESS
  COMPLETE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ShippingStatus {
  PENDING_LABEL
  LABEL_GENERATED
  IN_TRANSIT
  DELIVERED
  RETURNED
}
