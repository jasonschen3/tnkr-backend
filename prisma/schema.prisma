// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  COLLECTOR
  SERVICE_PROVIDER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  username  String   @unique
  email     String   @unique
  role      Role
  photo     String? // URL to the stored photo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String

  isVerified Boolean @default(false)
  // Request    Request[]
  // Address    Address[]
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model VerificationToken {
  code      String            @id @default(uuid())
  email     String
  createdAt DateTime          @default(now())
  expiresAt DateTime // 1hr
  type      VerificationType?
}

// enum ServiceType {
//   CLEANING
//   CUSTOM
//   RESTORATION
// }

// model Request {
//   id             String   @id @default(uuid())
//   pictures       String[]
//   jobDescription String
//   budget         Int
//   shoeSize       Int

//   // ASK ABOUT THIS AND ADDRESS FIELDS
//   brand                String
//   releaseYear          Int
//   previouslyWorkedWith Boolean

//   // Add this field for the relation
//   userId String
//   user   User   @relation(fields: [userId], references: [id])
// }

// model Address {
//   id        String @id @default(uuid())
//   street    String
//   city      String
//   stateCode String
//   zipCode   String

//   userId String
//   user   User   @relation(fields: [userId], references: [id])
// }
