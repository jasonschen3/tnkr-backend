// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER // COLLECTOR 
  TECHNICIAN // SERVICE_PROVIDER
  ADMIN
}

model User {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  phone             String
  email             String   @unique
  role              Role
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  password          String
  isVerified        Boolean  @default(false)
  profilePictureUrl String? // S3 URL to the stored photo

  // Ratings
  ratingsGiven    Review[] @relation("Reviewer")
  ratingsReceived Review[] @relation("Reviewee")

  // Only use one based on role, one to many
  customerRequests   Request[] @relation("RequestCustomer")
  technicianRequests Request[] @relation("RequestTechnician")

  // For technicians
  technicianProfile TechnicianProfile?
}

model TechnicianProfile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  servicesProvided   ServiceType[]
  businessName       String
  businessRegistered Boolean
  incorpNumber       String?
  websiteLink        String
  socialMediaLink    String

  // validId
  // Plan to store the ID pics in S3 bucket temporarily and immediately delete after verified
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model VerificationToken {
  code      String            @id @default(uuid())
  email     String
  createdAt DateTime          @default(now())
  expiresAt DateTime // 1hr
  type      VerificationType?
}

enum ServiceType {
  CLEANING
  CUSTOM
  RESTORATION
}

enum CleaningSubtype {
  LIGHT_CLEAN
  DEEP_CLEAN
  STAIN_REMOVAL
  DEODORIZATION
  DEOXIDIZE_NETTING
  DEOXIDIZE_RUBBER_SOLES
  DESIGNER_SHOE_CLEAN
  ICE_CLEAR_SOLES
  SUEDE_NUBUCK_CLEAN
  UPPER_REPAINT
  OTHER
}

enum CustomSubtype {
  DYE
  NEO_VINTAGE
  PAINT
  OTHER
}

enum RestorationSubtype {
  BACK_TABS_SWAP
  CLEAN_BEFORE_RESTORING
  GLUE_TOUCH_UP
  ICE_CLEAR_SOLES
  MIDSOLE_REPAINT
  PAINT_TOUCH_UP
  REGLUE
  REPLACE_NETTING
  REPLACE_WINGS
  SOLE_SWAPS_WITH_DONOR_SOLES
  SOLE_SWAPS_WITHOUT_DONOR_SOLES
  SUEDE_NUBUCK_REDYE
  UPPER_REPAINT
  OTHER
}

enum RequestType {
  STANDARD
  RUSH
  BULK
}

enum RequestStatus {
  BOOKED
  IN_PROGRESS
  COMPLETE
}

model Request {
  id             String   @id @default(uuid())
  pictures       String[]
  jobDescription String
  budget         Int // Whole integer
  shoeSize       Float // Men's size convert to women's

  brand                String
  shoeName             String
  releaseYear          Int
  previouslyWorkedWith String // Description

  // Service details
  service  ServiceType
  subtypes String[]

  // Post submit
  requestStatus RequestStatus @default(BOOKED)
  dateCreated   DateTime      @default(now())

  // User relations
  customerAddress Address @relation(fields: [addressId], references: [id])
  addressId       String  @unique

  customerId String
  customer   User   @relation("RequestCustomer", fields: [customerId], references: [id])

  technicianId String?
  technician   User?   @relation("RequestTechnician", fields: [technicianId], references: [id])
}

model Address {
  id        String @id @default(uuid())
  street    String
  city      String
  stateCode String
  zipCode   String

  request Request?
}

model Review {
  id          String   @id @default(uuid())
  rating      Int
  description String
  createdAt   DateTime @default(now())

  // Person who wrote review
  reviewerId String
  reviewer   User   @relation("Reviewer", fields: [reviewerId], references: [id])

  // Person being reviewed
  revieweeId String
  reviewee   User   @relation("Reviewee", fields: [revieweeId], references: [id])
}
